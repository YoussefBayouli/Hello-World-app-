apiVersion: v1
kind: Namespace
metadata:
  name: hello-world-flask
  labels:
    name: hello-world-flask
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: python-hello-world-deployment
  namespace: hello-world-flask
  labels:
    app: python-hello-world
spec:
  replicas: 1
  selector:
    matchLabels:
      app: python-hello-world
  template:
    metadata:
      labels:
        app: python-hello-world
    spec:
      containers:
      - name: python-hello-world
        image: spacegeekops/flask-hello-world:latest
        ports:
        - containerPort: 3000
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 10
        securityContext:
          runAsUser: 1000
          runAsGroup: 3000
          fsGroup: 2000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
      restartPolicy: Always
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: python-hello-world-hpa
  namespace: hello-world-flask
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: python-hello-world-deployment
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
---
apiVersion: v1
kind: Service
metadata:
  name: python-hello-world-service
  namespace: hello-world-flask
spec:
  selector:
    app: python-hello-world
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
  type: LoadBalancer
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-same-namespace
  namespace: hello-world-flask  
spec:
  podSelector:
    matchLabels:
      app: python-hello-world  
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
      - podSelector: {}  
  egress:
    - to:
      - podSelector: {} 
--- 
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: hello-world-flask
  name: python-hello-world-ingress
spec:
  rules:
  - host: helloworld.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: python-hello-world-service
            port:
              number: 80
